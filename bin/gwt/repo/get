#!/bin/bash
pwd
echo $rootpath

# repo_name="mpo-followup-fe-acs"
repo_name=$1

if [[ ! "$(pwd)" =~ "$rootpath" ]]; then
  echo "not in repos folder"
fi

repo_owner=$(basename "$(pwd)")

# $(gh search repos ${repo_owner}/${repo_name} --json defaultBranch --jq ".[].defaultBranch")

default_branch=$(gh search repos ${repo_name} --owner ${repo_owner} --json defaultBranch --jq ".[].defaultBranch")

if [[ -z $default_branch ]]; then
  echo "repository ${repo_owner}/${repo_name} not found cannot continue"
  exit
fi

echo "path" ${repo_owner}/${repo_name}
echo $default_branch

if [[ -d "$(pwd)/${repo_name}" ]]; then
  echo "folder already exists"
  exit
fi

#TBD
repo_user="$(pwd | cut --delimiter=/ --fields=5)"
acc="github.com-${repo_user}"

if [[ ! "$(cat ~/.ssh/config)" =~ "Host ${acc}" ]]; then
  echo "sshconfig ${acc} not found"
  exit
fi

# exit

# create folder
mkdir -p "$(pwd)/${repo_name}/default"

cd "$(pwd)/${repo_name}/default"

git init .

git remote add origin "git@${acc}:LEGO/${repo_name}.git"

git fetch

#have main branch
rootbr=$([[ ! -z "$(git branch -r --list '*/main')" ]] && echo "main")

if [[ -z $rootbr ]]; then
  rootbr=$([[ ! -z "$(git branch -r --list '*/master')" ]] && echo "master")

  if [[ -z $rootbr ]]; then
    rootbr=${default_branch}
  fi

fi

git worktree add ${rootbr} origin/${rootbr}

git checkout -b ${rootbr}

git pull --set-upstream origin ${rootbr}

cd -

mv "$(pwd)/${repo_name}/default" "$(pwd)/${repo_name}/${rootbr}"
