#!/bin/bash

switch(){
  if [[ $# -eq 1 ]]; then
    selected=$1
  else

    currentbranch=$(git branch | grep "*" | sed -e 's/* //')
    activelocal=$(git worktree list | sed -e 's/^.*\[//' | sed -e 's/\]$//')

    selected=$(printf "$activelocal\n$currentbranch" | sort | uniq -u | fzf)

  fi

  if [[ -z $selected ]]; then
    exit 0
  fi

  path=$(git worktree list | grep "$selected" | sed -e 's/ .*$//')
  root=${path:0:(($(echo $path | wc --chars)-$(echo $selected | wc --chars)-1))}
  repo=$(basename ${root})
  brname=${selected/\//-}
  sessionname="${repo}@${brname}"

  # echo $selected
  # echo $path
  # echo $root
  # echo $repo
  # echo $brname
  # echo $sessionname
  # exit

  if [[ -d $path ]]; then
    # sessionname=$selected
    tmux_running=$(pgrep tmux)

    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
      tmux new-session -s $sessionname -c $path
      exit 0
    fi

    if ! tmux has-session -t $sessionname 2> /dev/null; then
      tmux new-session -ds $sessionname -c $path
    fi

    tmux switch-client -t $sessionname

  fi
}

link(){
  if [[ $# -eq 1 ]]; then
      selected=$1
  else

    activeremote=$(git ls-remote --heads origin | sed -e 's/^.*heads\///')
    activelocal=$(git worktree list | sed -e 's/^.*\[//' | sed -e 's/\]$//')

    #diff only add other from active remote
    list=$(comm -23 <(tr ' ' $'\n' <<< $activeremote | sort) <(tr ' ' $'\n' <<< $activelocal | sort))

    echo $list | wc -l

    if [[ -z $list ]]; then
        echo 'no active branches to add'
        exit 0
    fi

    selected=$(printf "$list\n" | fzf)
  fi

  if [[ -z $selected ]]; then
      exit 0
  fi

  firstpath=$(git worktree list | head -1  | sed -e 's/ .*$//')
  firstlocal=$(git worktree list | head -1 | sed -e 's/^.*\[//' | sed -e 's/\]$//')
  root=${firstpath:0:(($(echo $firstpath | wc --chars)-$(echo $firstlocal | wc --chars)-1))}

  brfull=${root}/${selected}

  if [[ -d "$brfull" ]]; then

    echo "$selected - location already exits!"

  else

    mkdir -p "${brfull}"

    git worktree add ${brfull} origin/${selected}

    cd "${brfull}"

    git checkout ${selected}

    switch "$selected"

  fi
}

create(){
  #pick source branch
  if [[ $# -eq 1 ]]; then
      selected=$1
  else

    activeremote=$(git ls-remote --heads origin | sed -e 's/^.*heads\///')
    list=$(printf "$activeremote" | sort | uniq -u)
    selected=$(printf "$list\n" | fzf --prompt "create from branch: > ")

  fi

  if [[ -z $selected ]]; then
      exit 0
  fi

  until [[ $confirmed == 'yes' ]]
  do

    read -p 'enter branch name: ' brpath

    echo $brpath

    # confirmed='yes'

    read -p "confirm name ($brpath) ? - yes,no,exit [yes]: " confirmed

    confirmed=${confirmed:-yes}

    echo $confirmed

    if [[ $confirmed == 'exit' ]]; then
      echo exited
      exit 0
    fi

  done

  path=$(git worktree list | head -1  | sed -e 's/ .*$//')
  activelocal=$(git worktree list | head -1 | sed -e 's/^.*\[//' | sed -e 's/\]$//')
  root=${path:0:(($(echo $path | wc --chars)-$(echo $activelocal | wc --chars)-1))}
  repo=$(basename ${root})

  brname=${brpath/\//-}
  sessionname="${repo}@${brname}"

  echo $brpath
  echo $sessionname
  echo $root

  brfull=${root}/${brpath}

  if [ -d ${brfull} ]; then
    echo "folder exists"
    exit 0
  else

    mkdir -p ${brfull}

    git worktree add -b $brpath ${brfull} origin/${selected}

    cd ${brfull}

    git push -u origin $brpath

    switch "$brpath"
  fi
}

remove(){
  if [[ $# -eq 1 ]]; then
      selected=$1
  else

    activelocal=$(git worktree list | sed -e 's/^.*\[//' | sed -e 's/\]$//')
    list=$(printf "$activelocal\nmaster" | sort | uniq -u)

    echo $list | wc -l

    if [[ -z $list ]]; then
        echo 'no branches to remove'
        exit 0
    fi

    selected=$(printf "$list\n" | fzf)
  fi

  if [[ -z $selected ]]; then
      exit 0
  fi

  # echo $selected

  path=$(git worktree list | grep "$selected" | sed -e 's/ .*$//')
  if [[ ! -d "$path" ]]; then

    echo "$selected - location not exits!"
    exit 0

  fi

  currentbranch=$(git branch | grep "*" | sed -e 's/* //')
  #have to swich to another branch
  if [[ $selected == $currentbranch ]]; then
    echo "can't yet remove current branch"
    exit 0
  fi

  root=${path:0:(($(echo $path | wc --chars)-$(echo $selected | wc --chars)-1))}

  echo $selected
  echo $path
  echo $root

  git worktree remove $selected

  rm -rf $path
}

case "$1" in
  link)
    link $2
    ;;
  switch)
    switch $2
    ;;
  create)
    create
    ;;
  remove)
    remove $2
    ;;
  *)
    echo "Usage: $0 {link|switch|create|remove}"
    echo ""
    echo "this scripts are for manage git worktrees"
esac
