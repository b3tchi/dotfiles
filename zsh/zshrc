# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

# Enable autocompletions
autoload -Uz compinit
typeset -i updated_at=$(date +'%j' -r ~/.zcompdump 2>/dev/null || stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null)
if [ $(date +'%j') != $updated_at ]; then
  compinit -i
else
  compinit -C -i
fi
zmodload -i zsh/complist

# Save history so we get auto suggestions
HISTFILE=$HOME/.zsh_history
HISTSIZE=100000
SAVEHIST=$HISTSIZE

# Improve autocompletion style
zstyle ':completion:*' menu select # select completions with arrow keys
zstyle ':completion:*' group-name '' # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion

# Two regular plugins loaded without tracking.
zplugin light zsh-users/zsh-autosuggestions
zplugin light zdharma/fast-syntax-highlighting

zplugin light zsh-users/zsh-history-substring-search
zplugin light zsh-users/zsh-completions
# zplugin light marzocchi/zsh-notify

#theme
zplugin light romkatv/powerlevel10k

# dark version
zplugin snippet https://github.com/sainnhe/dotfiles/raw/master/.zsh-theme-gruvbox-material-dark

# Plugin history-search-multi-word loaded with tracking.
zplugin load zdharma/history-search-multi-word

# Load the pure theme, with zsh-async library that's bundled with it.
zplugin ice pick"async.zsh" src"pure.zsh"
zplugin light sindresorhus/pure

# Binary release in archive, from GitHub-releases page.
# After automatic unpacking it provides program "fzf".
zplugin ice from"gh-r" as"program"
zplugin load junegunn/fzf-bin

### Options
setopt auto_cd # cd by typing directory name if it's not a command
setopt auto_list # automatically list choices on ambiguous completion
setopt auto_menu # automatically use menu completion
setopt always_to_end # move cursor to end if word had one match
setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks # remove superfluous blanks from history items
setopt inc_append_history # save history entries as soon as they are entered
setopt share_history # share history between different instances
setopt correct_all # autocorrect commands
setopt interactive_comments # allow comments in interactive shells

# Keybindings
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^[[3~' delete-char
bindkey '^[3;5~' delete-char

# Theme
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# Export Variables
if [[ -n $(uname -o | grep 'Linux') ]]; then
  export IS_LINUX=1
fi

if [[ $(uname -o) = 'Android' ]]; then
  export IS_ANDROID=1
fi

# NNN quit on cd
n () {

    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
        . "$NNN_TMPFILE"
        rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

ggw () {

    # cd ~/wiki/
    cd "$1"

    # IFS=: read -ra selected < <(
    rg --color=always --colors 'match:fg:white' --line-number --no-heading --smart-case "\S" |
    fzf --ansi \
        --delimiter : \
        --preview 'bat --style=plain,numbers --color=always {1} --highlight-line {2}' \
        --preview-window 'up:50%:noborder:+{2}-3'

    ## rg flags
    #--colors
    #=always -> general coloring
    #--colors -> more granular color detailsO
    #='match:fx:white' -> specify foregroud color of hilighted text

    #--line-number -> display line numbers
    #--no-heading -> dont display header vith file names
    #--smart-case -> be case sensitive only when combine lower and upper case

    ## bat flags
    #--style general styling
    #=plain -> show only textfiles
    #=numbers -> display line nmunbers

    #--color
    #=always -> display lines


    # rg --color=always --line-number --no-heading --smart-case "${*:-}" ~/wiki/ |
    # --color "hl:-1:underline,hl+:-1:underline:reverse" \
    # )

    #return back last folder
    cd -

    #what to do with return items
    # [ -n "${selected[0]}" ] && vim "${selected[0]}" "+${selected[1]}"

}

#neovim version 0.5 from appimage
nvim-appi () {
    if [[ $# -eq 0 ]] ; then
        ~/Applications/nvim.appimage
    else
        ~/Applications/nvim.appimage "${*:-}"
    fi
}

### Aliases
## Shortcuts

## Conditional Shortcuts
if [[ $IS_LINUX -eq 1 ]]; then
    alias vi="nvim-appi"
    alias nvim="nvim-appi"
    alias fd="fdfind" #
fi

if [[ $IS_ANDROID -eq 1 ]]; then
    alias vi="nvim"
fi


## Nvim Shortcuts
alias dotfiles="nvim -c ':SLoad dotfiles'"
alias mwiki="nvim -c ':SLoad wiki'"
alias wwiki="nvim -c ':SLoad wiki_LEGO'"
alias scripts="nvim -c ':SLoad scripts'"

alias tmuxs="systemd-run --scope --user tmux"

## Custom shortcuts
alias ff="ggw ~/wiki/"

## Files
alias -s azcli=nvim

alias -s md=nvim-appi
alias -s txt=nvim-appi

alias -s json=nvim
alias -s csv=nvim
alias -s tsv=nvim
alias -s yaml=nvim




# official sollution pointin for this location but not exist in ubuntu
# embede then function n() in zshrc directly
# if [ -f /usr/share/nnn/quitcd/quitcd.bash_zsh ]; then
#     source /usr/share/nnn/quitcd/quitcd.bash_zsh
# fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
